# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: "[CI] Deploy NextJs Build to staging branch"

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "staging"
  cancel-in-progress: true

jobs:
  # Build job
  Build_Checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-pm
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "****************************************"
            echo "Unable to determine package manager"
            echo "****************************************"
            exit 1
          fi
          echo "****************************************"
          echo "Detected package manager: $GITHUB_OUTPUT"
          echo "****************************************"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: ${{ steps.detect-pm.outputs.manager }}

      - name: Install dependencies
        run: ${{ steps.detect-pm.outputs.manager }} ${{ steps.detect-pm.outputs.command }}

      - name: Build with NodeJS
        run: ${{ steps.detect-pm.outputs.manager }} run build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: ./next

  # Deployment job
  Build_Deploy:
    runs-on: ubuntu-latest
    name: Build and Push
    needs:  Build_Checks
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect package version
        id: detect-ver
        run: |
          sudo apt install jq -y
          if [ -f "${{ github.workspace }}/package.json" ]; then
            jq -r '.version' package.json >> $PKG_VER
            echo "pkg_ver=$PKG_VER" >> $GITHUB_OUTPUT
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
          else
            echo "************************************************************"
            echo "Version file not found. Please ensure package.json exists"
            echo "************************************************************"
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: ${{ steps.detect-ver.outputs.manager }}
  
      - name: Install all dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Push
        uses: s0/git-publish-subdir-action@develop
        env:
          REPO: self
          BRANCH: gh-staging # The branch name where you want to push the assets
          FOLDER: ./next # The directory where your assets are generated
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MESSAGE: "Staging-Build: ({sha}) ${{ steps.detect-ver.outputs.pkg_ver }}"
